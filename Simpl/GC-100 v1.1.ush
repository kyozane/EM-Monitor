[BEGIN]
  Version=1
[END]
[BEGIN]
  ObjTp=FSgntr
  Sgntr=UserSPlus
  RelVrs=1
  IntStrVrs=1
  SPlusVrs=4.04.01
  CrossCplrVrs=1.3
[END]
[BEGIN]
  ObjTp=Hd
  Cmn1=Global Cache GC-100 (ver 1.0)\\ \\The GC-100 module is not supported||1
  Cmn2=on X-series control systems.\\\\            Signals/Parameter\\·||1
  Cmn3=||2Digital inputs: <Get_config_p>\\                    <Version_p>||1
  Cmn4=\\                    <Poll_p> \\                    <Relay [1]…[3[>||1
  Cmn5=\\                    <StopIR[1]…[6]> \\·   Analog input    <Model#>\\
  Cmn6=||D<Module_poll#>\\·   Serial input:   <GC_100_RX$>\\
  Cmn7=||D<IR_Port$[1]…[6]>\\\\\\·   Digital output: <State>\\
  Cmn8=||D<Relay_FB[1]…[3]>\\                    <Digital_In_FB[1]…[6]>
  Cmn9=\\·   Serial output:  <GC_100_TX$>\\                    <Response$>\\
  Cmn10=||D<Version$>\\·   Analog output:  <Error#>\\||2
  Cmn11=||B<Module#>\\                    <Connector#>\\||1
  Cmn12=||C<ID_sent#>\\                    <ID_returned#>\\
  Cmn13=||1\\Description\\\\The GC-100 sofware module provides a versitile||1
  Cmn14=interface \\between a Global Cache GC-100 Models 6, 12, and 18||2
  Cmn15=via \\TCP/IP Ethernet channels.   This sofware module is based \\
  Cmn16=on the Application Program Interface described in "GC-100 \\API||1
  Cmn17=Specification Version 1.0".  The sofware module provides \\IR outputs,||1
  Cmn18=relay outputs, and digital inputs, and error \\handling.\\  \\(NOTE:
  Cmn19=||1Serial I/O to the same GC-100 hardware unit is not \\handled directly||1
  Cmn20=by this software module, but is sent \\through separate Crestron||1
  Cmn21=TCP/IP client symbols as described \\below.)\\  \\Each GC-100 software||1
  Cmn22=module is paired with one Crestron \\TCP/IP client symbol to provide||1
  Cmn23=communications between the \\Crestron controller and the GC-100||1
  Cmn24=hardware.  Each TCP/IP \\Client must be assigned the IP address||1
  Cmn25=of the GC_100 hardware; \\the IP Table of the control system should||1
  Cmn26=list this IP address \\together with the IP ID of the TCP/IP Client.
  Cmn27=||2The service port \\numbers of the GC_100 hardware should be entered||1
  Cmn28=in the <Port> \\parameter of each symbol. The port number is assigned||1
  Cmn29=as follows\\\\GC-100 software module                      4998\\
  Cmn30=First Serial I/O port (All models)          4999\\Second Serial||1
  Cmn31=I/O port (model 12 and 18)    5000\\\\For more information on the||1
  Cmn32=TCP/IP Client Symbol reference the \\Crestron help documentation.
  Cmn33=\\\\Detailed parameter description:\\\\The GC-100 module provides||1
  Cmn34=an interface at a number of levels.  \\At the highest (or simplest)||1
  Cmn35=level, relays can be activated, \\digital inputs can be monitored,||1
  Cmn36=and IR sequences can be \\transmitted by using just three sets of||1
  Cmn37=signals (parameters).  \\The number of I/O devices depends upon||1
  Cmn38=the GC-100 model (6, 12, or 18):\\\\<Relay[1]…[3]> will pulse or||1
  Cmn39=hold relays 1,2 or three respectively.\\\\<Digital_In_FB[1]…[6]>||1
  Cmn40=reflect the state of digital inputs 1 through 6.\\\\<IR-Port[1]…[6]>||1
  Cmn41=will transmit IR pulses as described by the character \\string send||1
  Cmn42=to each input, as described in the Global Cache GC-100 API \\Specs,||1
  Cmn43=starting with the carrier frequency parameter.  Module and \\connector||1
  Cmn44=(connector address), and ID parameters are provided \\internally||1
  Cmn45=by the GC-100 module symbol.  The GC-100 module must be \\initialized||1
  Cmn46=with an analog value of 6, 12, or 18 to correspond to the \\GC-100||1
  Cmn47=hardware module via <Model#> before using for the first time.  \\
  Cmn48=The GC-100 software module is connected to the corresponding TCP/IP||1
  Cmn49=\\Client symbol using <GC_100_TX$> to transmit commands to the hardware||1
  Cmn50=\\and <GC_100_RX$> to receive responses from the hardware.\\\\At||1
  Cmn51=the next level, relay feedback can be monitored using <Relay_FB[1]…[6]>.
  Cmn52=\\Digital input feedback for each hardware module can be polled||1
  Cmn53=by \\initializing the analog value of the input port with <Module_poll#>||1
  Cmn54=\\and pulsing <Poll_P>.  To create special IR sequences as described||1
  Cmn55=\\in the API, IR pulse trains can be stopped with the corresponding||1
  Cmn56=\\<StopIR_p[1]…[6]>.\\\\At the lowest level, more specific details||1
  Cmn57=of the interface can be \\controlled and sensed.  <Get_config_p>||1
  Cmn58=will result in a response \\from the hardware describing the hardware||1
  Cmn59=configuration (response \\decoding not implemented in software module||1
  Cmn60=version 1.0)\\  \\<Version_p> will result in the version of specific||1
  Cmn61=hardware modules \\as specified by <Module_poll#> sent out from||1
  Cmn62=the software module via \\<Version$>.  \\\\<State> provides an immediate||1
  Cmn63=feedback of the last output action.  \\For example, if one of the||1
  Cmn64=relay signals is activated, <State> \\will be asserted until the||1
  Cmn65=next output selection.  Connection address \\values are available||1
  Cmn66=through <Module#> and <Connector#>.   For each \\IR pulse string||1
  Cmn67=sent, a unique ID address is created <ID_sent#>and \\added to the||1
  Cmn68=pulse string.  When the IR transmission is complete, \\the corresponding||1
  Cmn69=ID is  provided through <ID_returned#>. \\ \\Specific API response||1
  Cmn70=text strings will appear on <Response$> according \\to the table:
  Cmn71=\\\\<Response$>		Meaning\\\\state			automatic response from relay||1
  Cmn72=or digital in\\statechange		unrequested response from relay or digital||1
  Cmn73=in\\completeir		IR pulse of <ID_return#> sequence has finished\\
  Cmn74=devicechange	power-on indications of hardware changes\\unknowncommand	
  Cmn75=Command error with secondary error in <ID return#>\\serialoverflow	
  Cmn76=Connection broken locally\\version			response to <version_p> at||1
  Cmn77=<Module_poll#>\\\\<Response$> can be connected to a Crestron Serial||1
  Cmn78=I/O symbol for \\further processing.  Alternately, <Error#> can||1
  Cmn79=be connected to a \\Crestron Analog Equate symbol to convert to||1
  Cmn80=individual digital \\signals according to the table:\\\\<Error#>	
  Cmn81=||4Meaning\\   0	        Normal, no error\\   1	        Unknown||1
  Cmn82=command\\   2	        devicechange at power up\\   3	        serial||1
  Cmn83=overflow at <Module#>\\   4	        bad response string\\   5	||2
  Cmn84=||6<module_poll#> not compatible with hardware model\\   6	||2
  Cmn85=||6<Model#> not implemented\\   7	        <StopIR_p> not compatible||1
  Cmn86=with hardware model\\   8	        <Relay> not compatible with hardware||1
  Cmn87=model\\   9	        <IR_out$> not compatible with hardware model\\
  Cmn88=\\Serial I/O to and from the GC-100 hardware is implemented using||1
  Cmn89=one \\additional Crestron TCP/IP Client module per Serial I/O port.
  Cmn90=||2\\Transmission parameters are set as per the API Specification||1
  Cmn91=\\using the hardware web site.  Only the error parameter of \\'serialoverflow'||1
  Cmn92=is provided through the GC-100 software module.\\
[END]
[BEGIN]
  ObjTp=Symbol
  Exclusions=1,19,20,21,88,89,167,168,179,213,214,215,216,217,225,226,248,249,266,267,310,718,756,854,
  Exclusions_CDS=5
  Inclusions_CDS=6
  Name=GC-100 v1.1
  SmplCName=GC-100 v1.1.usp
  Code=1
  SysRev5=4.000
  SMWRev=2.02.05
  InputCue1=Get_config_p
  InputSigType1=Digital
  InputCue2=Version_p
  InputSigType2=Digital
  InputCue3=Poll_p
  InputSigType3=Digital
  InputCue4=Relay[1]
  InputSigType4=Digital
  InputCue5=Relay[2]
  InputSigType5=Digital
  InputCue6=Relay[3]
  InputSigType6=Digital
  InputCue7=StopIR_p[#]
  InputSigType7=Digital
  OutputCue1=State
  OutputSigType1=Digital
  OutputCue2=Relay_FB[1]
  OutputSigType2=Digital
  OutputCue3=Relay_FB[2]
  OutputSigType3=Digital
  OutputCue4=Relay_FB[3]
  OutputSigType4=Digital
  OutputCue5=Digital_In_FB[#]
  OutputSigType5=Digital
  InputList2Cue1=GC_100_RX$
  InputList2SigType1=Serial
  InputList2Cue2=Model/#
  InputList2SigType2=Analog
  InputList2Cue3=Module_poll/#
  InputList2SigType3=Analog
  InputList2Cue4=IR_Out$[#]
  InputList2SigType4=Serial
  OutputList2Cue1=GC_100_TX$
  OutputList2SigType1=Serial
  OutputList2Cue2=Response$
  OutputList2SigType2=Serial
  OutputList2Cue3=Version$
  OutputList2SigType3=Serial
  OutputList2Cue4=Error/#
  OutputList2SigType4=Analog
  OutputList2Cue5=Module/#
  OutputList2SigType5=Analog
  OutputList2Cue6=Connector/#
  OutputList2SigType6=Analog
  OutputList2Cue7=ID_sent/#
  OutputList2SigType7=Analog
  OutputList2Cue8=ID_returned/#
  OutputList2SigType8=Analog
  ParamCue1=[Reference Name]
  MinVariableInputs=7
  MaxVariableInputs=12
  MinVariableInputsList2=4
  MaxVariableInputsList2=9
  MinVariableOutputs=5
  MaxVariableOutputs=10
  MinVariableOutputsList2=8
  MaxVariableOutputsList2=8
  MinVariableParams=0
  MaxVariableParams=0
  Expand=expand_separately
  Expand2=expand_separately
  ProgramTree=Logic
  SymbolTree=32
  Hint=INTERFACE TO GC-100 I/O Modules
  PdfHelp=
  HelpID= 
  Render=4
  Smpl-C=16
  CompilerCode=-48
  CompilerParamCode=27
  CompilerParamCode5=14
  NumFixedParams=1
  Pp1=1
  MPp=1
  NVStorage=10
  ParamSigType1=String
  SmplCInputCue1=o#
  SmplCOutputCue1=i#
  SmplCInputList2Cue1=an#
  SmplCOutputList2Cue1=ai#
  SPlus2CompiledName=S2_GC_100_v1_1
  SymJam=NonExclusive
  FileName=GC-100 v1.1.ush
  SIMPLPlusModuleEncoding=0
[END]
[BEGIN]
  ObjTp=Dp
  H=1
  Tp=1
  NoS=False
[END]
